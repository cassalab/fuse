} else {
mis_scores = df$raw_score[ind_mis]
if (!is.na(median_syn) & is.na(median_lof)){
if (median_mis < median_syn){
temp = -temp
median_syn = -median_syn
mis_scores = -mis_scores
}
median_lof = quantile(mis_scores, upper_bound, na.rm=T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
} else if (is.na(median_syn) & !is.na(median_lof)){
if (median_mis > median_lof){
temp = -temp
median_lof = -median_lof
mis_scores = -mis_scores
}
median_syn = quantile(mis_scores, lower_bound, na.rm=T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
} else {
ind_p = which(df$aaalt == "P")
median_p = median(df$raw_score[ind_p], na.rm=T)
if (median_p < median_mis){
temp = -temp
median_syn = -median_syn
mis_scores = -mis_scores
}
median_syn = quantile(mis_scores, lower_bound, na.rm = T)
median_lof = quantile(mis_scores, upper_bound, na.rm = T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
}
}
if (force_quantile){
ind_mis = which(df$functional_class == "MIS")
temp = df$norm_raw_score
mis_scores = df$norm_raw_score[ind_mis]
median_syn = quantile(mis_scores, lower_bound, na.rm = T)
median_lof = quantile(mis_scores, upper_bound, na.rm = T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
}
return(df)
}
## normalize DMS data
df = normalize_scoreset(df = df, lower_bound = 0.1, upper_bound = 0.9, force_quantile = T)
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "norm_raw_score", sd_norm = F)
## functions
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
get_js <- function(m){
mbar = mean(colMeans(m, na.rm = T), na.rm = T) # global mean
mu0 = colMeans(m, na.rm = T) # column means
s2 = var(as.vector(m), na.rm = T)/(nrow(m)*ncol(m)-length(which(is.na(as.vector(m)) == T))) # global variance
cval = 1 - (ncol(m)-2)*s2/sum((mu0 - mbar)^2, na.rm = T) # adjusted value
js_est = mbar + cval*(mu0 - mbar)
return(js_est)
}
funsum_to_subTable <- function(df.funsum){
df.sub_tb = c()
for (i in 1:nrow(df.funsum)){
temp = data.frame(aa_pair = paste0(rownames(df.funsum)[i], colnames(df.funsum)), score = as.vector(df.funsum[i,]))
df.sub_tb = rbind(df.sub_tb, temp)
}
return(df.sub_tb)
}
de_noise <- function(df, pos_mean_method, df.funsum, include_LOF = T, show_func_class=F){
# filter out row without amino acid changes
ind = which(!is.na(df$aaref) & !is.na(df$aaalt))
df = df[ind,]
if (include_LOF){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW*", split = ""))
} else {
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW", split = ""))
ind = which((df$aaref != "*") & (df$aaalt != "*"))
df = df[ind,]
}
df.sub_tb = funsum_to_subTable(df.funsum) #convert FUNSUM to tabular format
if (is.null(df[["gene"]])){
df[["gene"]] = "gene"
}
df$gene_aa_str = paste0(df$gene, "---", df$aaref, df$aapos, df$aaalt)
# collapse rows with the same amino acid substitutions
df = df %>% group_by(gene_aa_str) %>%
summarise(gene = unique(gene), aapos = unique(aapos), aaref = unique(aaref), aaalt = unique(aaalt),
raw_score = mean(raw_score), norm_raw_score = mean(norm_raw_score))
## calculate positional component
df.pos_score = df %>% group_by(gene, aapos) %>% summarise(aaref = unique(aaref), pos_mean = NA)
df.pos_score$gene_aapos = paste0(df.pos_score$gene, "---", df.pos_score$aapos)
temp = matrix(NA, nrow = nrow(df.pos_score), ncol = length(aa_list))
colnames(temp) <- aa_list
if (pos_mean_method == "funsum"){
temp2 = matrix(NA, nrow = nrow(df.pos_score), ncol = length(aa_list))
colnames(temp2) <- aa_list
}
# pb = txtProgressBar(min = 1, max = nrow(df.pos_score), initial = 1, style = 3)
for (i in 1:nrow(df.pos_score)){
ind = which(df$gene == df.pos_score$gene[i] & df$aapos == df.pos_score$aapos[i])
ind2 = df$aaalt[ind] %in% aa_list
temp[i, df$aaalt[ind[ind2]]] = df$norm_raw_score[ind[ind2]]
# calculate pos_mean by funsum method
if (pos_mean_method == "funsum"){
ind = which(!is.na(temp[i,]))
temp2[i,ind] = temp[i,ind] - df.funsum[df.pos_score$aaref[i], aa_list[ind]]
}
# setTxtProgressBar(pb,i)
}
# close(pb)
# calculate pos_mean by other methods
if (pos_mean_method == "mean"){
df.pos_score$pos_mean = rowMeans(temp, na.rm = T)
} else if (pos_mean_method == "median"){
df.pos_score$pos_mean = apply(temp, 1, FUN = median, na.rm = T)
} else if (pos_mean_method == "js"){
df.pos_score$pos_mean = get_js(t(temp))
} else if (pos_mean_method == "funsum"){
df.pos_score$pos_mean = get_js(t(temp2))
}
## construct a new df with all possible substitutions
df.out = df.pos_score %>% dplyr::select(gene, aapos, aaref) %>%
dplyr::slice(rep(1:n(), each = length(aa_list)))
df.out$aaalt = rep(aa_list, nrow(df.pos_score))
# assign functional class
if (show_func_class){
df.out$functional_class = NA
ind = which(df.out$aaref != df.out$aaalt & df.out$aaalt != '*')
df.out$functional_class[ind] = "MIS"
ind = which(df.out$aaref != "*" & df.out$aaalt == "*")
df.out$functional_class[ind] = "LOF"
ind = which(df.out$aaref == df.out$aaalt)
df.out$functional_class[ind] = "SYN"
}
# assign norm_score, pos_score, sub_score to df.out
df.out$gene_aa_str = paste0(df.out$gene, "---", df.out$aaref, df.out$aapos, df.out$aaalt)
df.out$gene_aapos = paste0(df.out$gene, "---", df.out$aapos)
df.out$aa_pair = paste0(df.out$aaref, df.out$aaalt)
ind = match(df.out$gene_aa_str, table = df$gene_aa_str)
df.out$raw_score = df$raw_score[ind]
df.out$norm_raw_score = df$norm_raw_score[ind]
ind = match(df.out$gene_aapos, table = df.pos_score$gene_aapos)
df.out$pos_score = df.pos_score$pos_mean[ind]
ind = match(df.out$aa_pair, table = df.sub_tb$aa_pair)
df.out$sub_score = df.sub_tb$score[ind]
df.out$final_score = df.out$pos_score + df.out$sub_score
df.out$final_score_lite = df.out$final_score
ind = which(is.na(df.out$norm_raw_score))
df.out$final_score_lite[ind] = NA
return(df.out)
}
de_noise_ss_1gene <- function(df, pos_mean_method, df.funsum, ls.funsum_ss, dss_path, include_LOF = T, show_func_class=F){
# filter out row without amino acid changes
ind = which(!is.na(df$aaref) & !is.na(df$aaalt))
df = df[ind,]
if (include_LOF){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW*", split = ""))
} else {
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW", split = ""))
ind = which((df$aaref != "*") & (df$aaalt != "*"))
df = df[ind,]
}
df.sub_tb = funsum_to_subTable(df.funsum) #convert FUNSUM to tabular format
if (is.null(df[["gene"]])){
df[["gene"]] = "gene"
}
df$gene_aa_str = paste0(df$gene, "---", df$aaref, df$aapos, df$aaalt)
# collapse rows with the same amino acid substitutions
df = df %>% group_by(gene_aa_str) %>%
summarise(gene = unique(gene), aapos = unique(aapos), aaref = unique(aaref), aaalt = unique(aaalt),
raw_score = mean(raw_score), norm_raw_score = mean(norm_raw_score))
## calculate positional component
df.pos_score = df %>% group_by(gene, aapos) %>% summarise(aaref = unique(aaref), pos_mean = NA)
df.pos_score$gene_aapos = paste0(df.pos_score$gene, "---", df.pos_score$aapos)
temp = matrix(NA, nrow = nrow(df.pos_score), ncol = length(aa_list))
colnames(temp) <- aa_list
if (pos_mean_method == "funsum"){
temp2 = matrix(NA, nrow = nrow(df.pos_score), ncol = length(aa_list))
colnames(temp2) <- aa_list
}
for (i in 1:nrow(df.pos_score)){
ind = which(df$gene == df.pos_score$gene[i] & df$aapos == df.pos_score$aapos[i])
ind2 = df$aaalt[ind] %in% aa_list
temp[i, df$aaalt[ind[ind2]]] = df$norm_raw_score[ind[ind2]]
# calculate pos_mean by funsum method
if (pos_mean_method == "funsum"){
ind = which(!is.na(temp[i,]))
temp2[i,ind] = temp[i,ind] - df.funsum[df.pos_score$aaref[i], aa_list[ind]]
}
}
# calculate pos_mean by other methods
if (pos_mean_method == "mean"){
df.pos_score$pos_mean = rowMeans(temp, na.rm = T)
} else if (pos_mean_method == "median"){
df.pos_score$pos_mean = apply(temp, 1, FUN = median, na.rm = T)
} else if (pos_mean_method == "js"){
df.pos_score$pos_mean = get_js(t(temp))
} else if (pos_mean_method == "funsum"){
df.pos_score$pos_mean = get_js(t(temp2))
}
## construct a new df with all possible substitutions
df.out = df.pos_score %>% select(gene, aapos, aaref) %>%
dplyr::slice(rep(1:n(), each = length(aa_list)))
df.out$aaalt = rep(aa_list, nrow(df.pos_score))
# assign functional class
if (show_func_class){
df.out$functional_class = NA
ind = which(df.out$aaref != df.out$aaalt & df.out$aaalt != '*')
df.out$functional_class[ind] = "MIS"
ind = which(df.out$aaref != "*" & df.out$aaalt == "*")
df.out$functional_class[ind] = "LOF"
ind = which(df.out$aaref == df.out$aaalt)
df.out$functional_class[ind] = "SYN"
}
# assign norm_score, pos_score, sub_score to df.out
df.out$gene_aa_str = paste0(df.out$gene, "---", df.out$aaref, df.out$aapos, df.out$aaalt)
df.out$gene_aapos = paste0(df.out$gene, "---", df.out$aapos)
df.out$aa_pair = paste0(df.out$aaref, df.out$aaalt)
# add dssp SS annotation
require(ptm)
df.out$ss = NA
df.out$acc = NA
df.dssp = parse.dssp(file = dss_path, keepfiles = T)
ind = match(df.out$aapos, table = df.dssp$respdb)
df.out$ss = df.dssp$ss[ind]
df.out$acc = df.dssp$sasa[ind]
ind = match(df.out$gene_aa_str, table = df$gene_aa_str)
df.out$raw_score = df$raw_score[ind]
df.out$norm_raw_score = df$norm_raw_score[ind]
ind = match(df.out$gene_aapos, table = df.pos_score$gene_aapos)
df.out$pos_score = df.pos_score$pos_mean[ind]
ind = match(df.out$aa_pair, table = df.sub_tb$aa_pair)
df.out$sub_score = df.sub_tb$score[ind]
ss_list = c("G" = "Helices", "H" = "Helices", "I" = "Helices",
"E" = "Strands", "B" = "Strands",
"T" = "Loops", "S" = "Loops", "C" = "Loops")
df.out$sub_score_ss = NA
for (ss in names(ss_list)){
ind = which(df.out$ss == ss)
if (length(ind)){
df.sub_tb = funsum_to_subTable(ls.funsum_ss[[ss]]) #convert FUNSUM to tabular format
ind2 = match(df.out$aa_pair[ind], table = df.sub_tb$aa_pair)
df.out$sub_score_ss[ind] = df.sub_tb$score[ind2]
}
}
df.out$final_score = df.out$pos_score + df.out$sub_score
df.out$final_score_ss = df.out$pos_score + df.out$sub_score_ss
ind = which(is.na(df.out$final_score_ss))
df.out$final_score_ss[ind] = df.out$final_score[ind]
df.out$sub_score_ss[ind] = df.out$sub_score[ind]
return(df.out)
}
parse_text_input <- function(text_input){
temp = matrix(unlist(strsplit(text_input, split = ",|\t|\n")), ncol = 5, byrow = T)
colnames(temp) = c("gene", "aapos", "aaref", "aaalt", "raw_score")
df_all = data.frame(temp)
df_all$aapos = as.numeric(df_all$aapos)
df_all$raw_score = as.numeric(df_all$raw_score)
return(df_all)
}
check_DMS_input <- function(df){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW*", split = ""))
msg = c()
if (ncol(df) < 5){
msg = c(msg, "Error: DMS data has less than 5 columns!")
return(list(df, msg))
}
col_names = c("gene", "aapos", "aaref", "aaalt", "raw_score")
if (!all(col_names %in% colnames(df))){
missing_col = paste(col_names[!(col_names %in% colnames(df))], collapse = ",")
msg = c(msg, paste0("Error: DMS data missing ", missing_col, " columns!"))
return(list(df, msg))
}
if ("Z" %in% df$aaref | "Z" %in% df$aaalt){
msg = c(msg, "Warning: amino acid Z detected! Converted to stop codon '*'.")
df$aaref[df$aaref == "Z"] = "*"
df$aaalt[df$aaalt == "Z"] = "*"
}
if (!all(df$aaref %in% aa_list) | !all(df$aaalt %in% aa_list)){
msg = c(msg, "Warning: unknown amino acid detected! Rows removed.")
df = df[df$aaref %in% aa_list,]
df = df[df$aaalt %in% aa_list,]
}
if (class(df$aapos) != "numeric"){
msg = c(msg, "Warning: non-numeric animo acid positions detected! Rows removed.")
ind = grep(pattern = "\\D", x = df$aapos)
df = df[-ind,]
df$aapos = as.numeric(df$aapos)
}
if (class(df$raw_score) != "numeric"){
msg = c(msg, "Warning: non-numeric DMS score detected! Rows removed.")
ind = grep(pattern = "\\D", x = df$aapos)
df = df[-ind,]
df$aapos = as.numeric(df$aapos)
}
return(list(df, msg))
}
get_norm_score <-  function(df, pos_mean_method, pos_norm = T, sd_norm = T, invert_score=F, include_LOF=F, infer_score=F, score_type="raw_score"){
if (include_LOF){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW*", split = ""))
} else {
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW", split = ""))
}
ind = which((df$aaref %in% aa_list) & (df$aaalt %in% aa_list))
df = df[ind,]
df.out = data.frame(aapos = unique(df$aapos), aaref = NA, pos_mean = NA)
temp = matrix(NA, nrow = nrow(df.out), ncol = length(aa_list))
colnames(temp) <- aa_list
for (i in 1:nrow(df.out)){
ind = which(df$aapos == df.out$aapos[i])
df.out$aaref[i] = unique(df$aaref[ind])[1]
ind2 = df$aaalt[ind] %in% aa_list
temp[i, df$aaalt[ind[ind2]]] = df[[score_type]][ind[ind2]]
}
if(invert_score){
temp = -temp
}
# normalize the data by sd
if (sd_norm){
temp = (temp-median(temp, na.rm = T))/sd(temp, na.rm = T)
}
if (pos_mean_method == "mean"){
df.out$pos_mean = rowMeans(temp, na.rm = T)
} else if (pos_mean_method == "median"){
df.out$pos_mean = apply(temp, 1, FUN = median, na.rm = T)
} else if (pos_mean_method == "js"){
df.out$pos_mean = get_js(t(temp))
} else if (pos_mean_method == "funsum"){
df.funsum_all = readRDS("./shiny_app/DMS_denoiser/funsum_081722.rds")
if (!include_LOF){
df.funsum_all = df.funsum_all[aa_list, aa_list]
}
pos_mean_all = c()
for (i in 1:nrow(temp)){
aaref = df.out$aaref[i]
pos_mean = NA
ind = which(!is.na(temp[i,]))
temp2 = temp[i,ind] - df.funsum_all[aaref, aa_list[ind]]
pos_mean = mean(as.numeric(temp2))
pos_mean_all = c(pos_mean_all, pos_mean)
}
df.out$pos_mean = pos_mean_all
}
if (pos_norm){
temp = temp - df.out$pos_mean
}
if (infer_score){
temp = df.out$pos_mean + df.funsum_all[df.out$aaref,aa_list]
}
df.out = cbind(df.out, temp)
return(df.out)
}
get_FUNSUM <- function(df.func_score, avg_method, include_LOF=F){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW", split = ""))
if (include_LOF){
aa_list = unlist(strsplit("RHKDESTNQCGPAVILMFYW*", split = ""))
}
df.funsum = matrix(NA, nrow = length(aa_list), ncol = length(aa_list))
rownames(df.funsum) = aa_list
colnames(df.funsum) = aa_list
for (aa in aa_list){
ind = which(df.func_score$aaref == aa)
if (length(ind)>0){
temp = as.matrix(df.func_score[ind, aa_list])
if (avg_method == "mean"){
df.funsum[aa,] = colMeans(temp, na.rm = T)
} else if (avg_method == "median"){
df.funsum[aa,] = apply(temp, 2, FUN = median, na.rm = T)
} else if (avg_method == "js"){
df.funsum[aa,] = get_js(temp)
} else {
stop()
}
}
}
return(df.funsum)
}
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "norm_raw_score", sd_norm = F)
df.funsum = get_FUNSUM(df.sub_score, avg_method = "js", include_LOF = include_LOF)
res = cor.test(as.numeric(df.funsum), as.numeric(df.funsum_all), method = "pearson")
res$estimate
View(df)
View(df.TP53)
draw_score_distribution_ggplot <- function(df, score_type = "raw_score", bin_ct = 30){
require(ggridges)
plt = df %>% ggplot(aes(x=.data[[score_type]], y=functional_class, fill=functional_class)) +
geom_density_ridges(alpha=0.6, stat="binline", bins = bin_ct) + ylab("") + xlab(score_type) +
theme_ridges()
return(plt)
}
draw_score_distribution_ggplot(df)
df = df.BRCA1
View(df.BRCA1)
draw_score_distribution_ggplot(df)
draw_score_distribution_ggplot(df, score_type = "norm_raw_score")
df = df.BRCA1 %>% select(-norm_raw_score, -functional_class)
## normalize DMS data
df = normalize_scoreset(df = df, lower_bound = 0.1, upper_bound = 0.9, force_quantile = T)
temp = correct_direction(df = df, df.funsum = df.funsum_all, include_LOF = include_LOF)
df2 = temp[[1]]
View(df2)
View(df)
df = df.BRCA1 %>% select(-norm_raw_score, -functional_class)
## normalize DMS data
df = normalize_scoreset(df = df, lower_bound = 0.1, upper_bound = 0.9, force_quantile = T)
df.funsum = df.funsum_all
gene = df$gene[1]
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "norm_raw_score", sd_norm = F)
df.funsum_gene = get_FUNSUM(df.sub_score, avg_method = "js", include_LOF = include_LOF)
res = cor.test(as.numeric(df.funsum_gene), as.numeric(df.funsum_all), method = "pearson")
res$estimate
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "raw_score", sd_norm = F)
df.funsum_gene = get_FUNSUM(df.sub_score, avg_method = "js", include_LOF = include_LOF)
res = cor.test(as.numeric(df.funsum_gene), as.numeric(df.funsum_all), method = "pearson")
res$estimate
msg = c()
msg = c(msg, paste0("Info: Functional data for ", gene, " in opposite direction, score inverted."))
msg
correct_direction <- function(df, df.funsum, include_LOF=F){
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "raw_score", sd_norm = F)
df.funsum_gene = get_FUNSUM(df.sub_score, avg_method = "js", include_LOF = include_LOF)
res = cor.test(as.numeric(df.funsum_gene), as.numeric(df.funsum_all), method = "pearson")
if (res$estimate < 0){
df$norm_raw_score = -df$norm_raw_score
msg = paste0("Info: Functional data for ", gene, " in opposite direction, score inverted.")
return(list("invert", msg))
} else {
return(list("same", ""))
}
}
normalize_scoreset_lite <- function(df, lower_bound = 0.05, upper_bound = 0.95, direction = "same"){
if (!"functional_class" %in% colnames(df)){
df$functional_class = NA
ind = which(df$aaref != df$aaalt & df$aaalt != '*')
df$functional_class[ind] = "MIS"
ind = which(df$aaref != "*" & df$aaalt == "*")
df$functional_class[ind] = "LOF"
ind = which(df$aaref == df$aaalt)
df$functional_class[ind] = "SYN"
}
ind_mis = which(df$functional_class == "MIS")
temp = df$raw_score
if (direction == "inverted"){
temp = -temp
}
mis_scores = temp[ind_mis]
median_syn = quantile(mis_scores, lower_bound, na.rm = T)
median_lof = quantile(mis_scores, upper_bound, na.rm = T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
return(df)
}
temp = correct_direction(df = df, df.funsum = df.funsum_all, include_LOF = include_LOF)
temp
direction = temp[[1]]
## normalize DMS data
df = normalize_scoreset_lite(df = df, lower_bound = 0.1, upper_bound = 0.9, direction = direction)
draw_score_distribution_ggplot(df, score_type = "norm_raw_score")
correct_direction <- function(df, df.funsum, include_LOF=F){
gene = df$gene[1]
df.sub_score = get_norm_score(df, pos_mean_method = "js", include_LOF = include_LOF, score_type = "raw_score", sd_norm = F)
df.funsum_gene = get_FUNSUM(df.sub_score, avg_method = "js", include_LOF = include_LOF)
res = cor.test(as.numeric(df.funsum_gene), as.numeric(df.funsum_all), method = "pearson")
if (res$estimate < 0){
df$norm_raw_score = -df$norm_raw_score
msg = paste0("Info: Functional data for ", gene, " in opposite direction, score inverted.")
return(list("inverted", msg))
} else {
return(list("same", ""))
}
}
normalize_scoreset_lite <- function(df, lower_bound = 0.05, upper_bound = 0.95, direction = "same"){
if (!"functional_class" %in% colnames(df)){
df$functional_class = NA
ind = which(df$aaref != df$aaalt & df$aaalt != '*')
df$functional_class[ind] = "MIS"
ind = which(df$aaref != "*" & df$aaalt == "*")
df$functional_class[ind] = "LOF"
ind = which(df$aaref == df$aaalt)
df$functional_class[ind] = "SYN"
}
ind_mis = which(df$functional_class == "MIS")
temp = df$raw_score
if (direction == "inverted"){
temp = -temp
}
mis_scores = temp[ind_mis]
median_syn = quantile(mis_scores, lower_bound, na.rm = T)
median_lof = quantile(mis_scores, upper_bound, na.rm = T)
df$norm_raw_score = (temp-median_syn)/(median_lof-median_syn)
return(df)
}
## normalize DMS data
df = normalize_scoreset_lite(df = df, lower_bound = 0.1, upper_bound = 0.9, direction = direction)
direction
temp = correct_direction(df = df, df.funsum = df.funsum_all, include_LOF = include_LOF)
direction = temp[[1]]
direction
## normalize DMS data
df = normalize_scoreset_lite(df = df, lower_bound = 0.1, upper_bound = 0.9, direction = direction)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
